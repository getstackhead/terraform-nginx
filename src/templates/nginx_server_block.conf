{{ define "authentication" }}
        # Authentication
        {{ if .Location.AuthBasic }}
        auth_basic           "{{ .Location.AuthBasic }}";
        {{ end }}
        {{ if .Location.AuthBasicUserFile }}
        auth_basic_user_file "{{ .Location.AuthBasicUserFile }}";
        {{ end }}
{{ end }}

server {
    listen {{ .Listen }} http2 {{ if .UseHttps }}ssl{{ end }};
    listen [::]:{{ .Listen }} http2 {{ if .UseHttps }}ssl{{ end }};
    server_name {{ .ServerName }};

# SSL certificates

# Locations
    location {{ .Location.Path }} {
        {{ if .Port == 80 }}
            {{ if .ForwardAcme != "" }}
            location /.well-known/acme-challenge {
                alias {{ .ForwardAcme }};

                location ~ /.well-known/acme-challenge/(.*) {
                    default_type text/plain;
                }
            }
            {{ end }}
            {{ if .ForwardHttps }}
                return 301 https://{{ .ServerName }}$request_uri;
            {{ end }}
            {{template "forward_https" pipeline}}
        {{ end }}

        {{template "authentication"}}
    }
}

{{ if .UseHttps && .Port == 80 }}
server {
    listen 443 http2 {{ if .UseHttps }}ssl{{ end }};
    listen [::]:443 http2 {{ if .UseHttps }}ssl{{ end }};
    server_name {{ .ServerName }};

    # SSL certificates
    gzip off;
    ssl_certificate {{ stackhead__certificates_project_folder }}/fullchain.pem;
    ssl_certificate_key {{ stackhead__certificates_project_folder }}/privkey.pem;
    include /etc/nginx/h5bp/ssl/policy_modern.conf;
    client_max_body_size 10G;

    # Locations
    location {{ .Location.Path }} {
        {{template "authentication"}}
    }
}
{{ end }}